#! /usr/bin/python

import sys

args = sys.argv[1:]

ind5 = ['2014_SOL_MB8684']
sat5 = ['2014_SOL_MB8685', '2014_SOL_MB8686']
fae5 = ['2014_SOL_MB8687', '2014_SOL_MB8688']

ind12 = ['2014_SOL_TB8858', '2014_SOL_TB8859',
         '2014_SOL_TB8860', '2014_SOL_TB8861']

sat12 = ['2014_SOL_TB8862', '2014_SOL_TB8863',
         '2014_SOL_TB8864', '2014_SOL_TB8865']

fae12 =  ['2014_SOL_TB8866', '2014_SOL_TB8867',
          '2014_SOL_TB8868', '2014_SOL_TB8869']

wildind = ['/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_ACACTGAC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_ACGTAGCA.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CACACAGT.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_ACGTGCTG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_ACTGATAC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CATGCGAC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CGATACTA.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_ACTGCTCA.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CAGTCTCA.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_GTACTCGT.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_GTCATGTG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_TGCATCGT.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_TGTGACTG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_ACACGACA.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_ACGTCTAC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CAGTGTGT.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CATGATCA.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_GTACGCTG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_GTCAGTGT.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_TGTGTGAC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_TGTGCAGT.bam']
         
wildsat = ['/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_AGAGCTAG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CTGACATC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_GATCATAG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_TCAGCATC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_TCGATGTC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_AGAGTCGA.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_AGCTATAG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CTCTCTAG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CTGAGCAG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_GAGAGCTC.bam']
         
wildfae = ['/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_ACTGTGTG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CATGTCGT.bam,', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CGATCAGC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_GTCACTCA.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_GTGTCAGT.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_TATAGCAT.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_TGCAGCTG.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_AGCTGTGA.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_CTCTGCTC.bam', 
         '/data/bo1mesx/ruff/pugnax_gwas/RADseq/call_snps/snps02/filtered_bam/bm_RUFFv0.2_GATCTGTC.bam']

ind17 = ind5 + ind12
sat17 = sat5 + sat12
fae17 = fae5 + fae12

if args[1] == "wgs5":
    if args[0] == "F_I":
        ref = ['2014_SOL_MB8684']
        alt = ['2014_SOL_MB8687', '2014_SOL_MB8688']
    elif args[0] == "F_S":
        ref = ['2014_SOL_MB8685', '2014_SOL_MB8686']
        alt = ['2014_SOL_MB8687', '2014_SOL_MB8688']
    elif args[0] == "S_I":
        ref = ['2014_SOL_MB8684']
        alt = ['2014_SOL_MB8685', '2014_SOL_MB8686']
    elif args[0] == "F_SI":
        ref = ['2014_SOL_MB8684', '2014_SOL_MB8685', '2014_SOL_MB8686']
        alt = ['2014_SOL_MB8687', '2014_SOL_MB8688']
elif args[1] == "wgs17":
    if args[0] == "F_I":
        ref = ind17
        alt = fae17
    elif args[0] == "F_S":
        ref = sat17
        alt = fae17
    elif args[0] == "S_I":
        ref = ind17
        alt = sat17
    elif args[0] == "F_SI":
        ref = sat17 + ind17
        alt = fae17
elif args[1] == "wildrad":
    if args[0] == "F_I":
        ref = wildind
        alt = wildfae
    elif args[0] == "F_S":
        ref = wildsat
        alt = wildfae
    elif args[0] == "S_I":
        ref = wildind
        alt = wildsat
    
    
#print ref, alt

#ref = ['2014_SOL_MB8684']
#ref = ['2014_SOL_MB8685', '2014_SOL_MB8686']
#alt = ['2014_SOL_MB8685', '2014_SOL_MB8686']
#alt = ['2014_SOL_MB8687', '2014_SOL_MB8688']
#names = ['2014_SOL_MB8685', '2014_SOL_MB8686']

nref = len(ref)
nalt = len(alt)

from evolib.iterators import vcf_iter
from evolib.stats.PopGenStats import Dxy

def gtiter(row, names):
    for samp in row.iter_samples():
        if samp.name in names:
            dp = samp['DP']
            if dp != "." and dp is not None and int(dp) > 7:
                gt = samp['GT']
                if gt is None or gt == "./.":
                    yield '0/0'
                else:
                    yield gt


for row in vcf_iter(sys.stdin):
    
    refgts = list(gtiter(row, ref))
    altgts = list(gtiter(row, alt))

    #r['DP'] > 7 and r['GT'] != './.' and r['GT'] is not None))
    
    #altgts = list((a['GT'] for a in row.iter_samples() if a.name in alt and a['GT'] is not None and a['GT'] != "./." and a['DP'] != "." and a['DP'] is not None and int(a['DP']) > 7))
    #a['DP'] > 7 and a['GT'] != './.' and a['GT'] is not None))

    nsamref = len(refgts)
    refref = refgts.count('0/0')
    refhet = refgts.count('0/1')
    refalt = refgts.count('1/1')
    
    nsamalt = len(altgts)
    altref = altgts.count('0/0')
    althet = altgts.count('0/1')
    altalt = altgts.count('1/1')

    chrom, pos = row['CHROM'], row['POS']
    
    if args[1] == "wildrad":
        # ind conditions
        if nsamref >= 4 and nsamalt >= 4 and nsamref == sum([refref, refhet, refalt]) and nsamalt == sum([altref, althet, altalt]):
            
            printlst = [chrom,
                        str(pos),
                        str(2 * refref + refhet),
                        str(2 * refalt + refhet),
                        str(2 * altref + althet),
                        str(2 * altalt + althet)]
            #print row
            dxy = Dxy(2 * refref + refhet,
                      2 * refalt + refhet,
                      2 * altref + althet,
                    2 * altalt + althet)
        
            print ' '.join(printlst + [str(dxy)])
            
        else:
            
            print chrom, pos, "NA", "NA", "NA", "NA", "NA" 
    else:
        # ind conditions
        if nsamref == nref and nsamalt == nalt and nsamref == sum([refref, refhet, refalt]) and nsamalt == sum([altref, althet, altalt]):
            
            printlst = [chrom,
                        str(pos),
                        str(2 * refref + refhet),
                        str(2 * refalt + refhet),
                        str(2 * altref + althet),
                        str(2 * altalt + althet)]
            #print row
            dxy = Dxy(2 * refref + refhet,
                      2 * refalt + refhet,
                      2 * altref + althet,
                    2 * altalt + althet)
        
            print ' '.join(printlst + [str(dxy)])
            
        else:

            print chrom, pos, "NA", "NA", "NA", "NA", "NA"
